libmemetendo:
- Get rid of some of the truncating `as` casts and clippy-related annotations.
  Using smaller types and instead widening with `into()` is better.
  Also consider using more `try_into()` over `as`, even if we know the cast will
  not actually truncate on the platforms memetendo supports, etc.
- Finish implementing proper soft (and maybe hard) resets.
- Finish implementing proper BIOS skipping.
- Proper cycle counting to make timings more accurate!
- Optimize video rendering: consider scanline-based by default, falling back to
  pixel-based if there's mid-scanline changes. This is a big reason for
  memetendo's performance woes; we're basically always assuming the worst case,
  but mid-scanline changes rarely happen in most programs! Even without much
  other special optimizations, per-scanline will be much better for CPU cache
  and branch prediction (and maybe there'll be some opportunities for auto
  vectorization)!
- Maybe use a tree-based structure for obj region stuff, so we don't need to
  store such large buffers (may not actually be a problem, as computers have
  more than a few KB of memory these days, but the tree approach might fit
  easier in CPU cache, at the exchange of potentially O(logn) access times -
  profile this!).
- After addressing the low-hanging performance fruits, set up some PGO.
- More tests, especially for the video stuff!

web-memetendo:
- Write some JS glue to more directly write to buffers from WASM.
- Spruce up the index a bit; maybe add a nice GBA (or toaster)-inspired chrome
  around the screen for spice!
- Set up a GitHub Action for updating the gh-pages site.
- Need a script or something for building with wasm-pack.
- Revisit some of the error handling; do we need to unwrap() so much, or did we
  miss unwrap()ping some errors that ought to not actually happen?
